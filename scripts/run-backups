#!/bin/bash
# Script to make backups of root and home directories
# Input: "home" and/or "full" and/or "shared" and/or "media"
# Options: 
#   -f: Run backup without checking if the last backup is outdated
#
# Examples:
# sudo ./run_backups home full # update home and full backups
# sudo ./run_backups -f full # make full backups without checking timestamp
#
# If script is run from a shell output and error will be sent to the shell. 
# Otherwise (i.e. cron job) output and error will be sent to the $logfile and 
# $errfile respectively.
#
# Customizations (folder locations etc.) should all be in the functions 
# set_home_vars, set_full_vars and set_common_vars



#-------------------------------------------------------------------------------
#---------------------------------- VARIABLES ----------------------------------
#-------------------------------------------------------------------------------


# Variables specific to home backups
set_home_vars() {
    mount_point=/mnt/backups/home # where backup drive is mounted
    backup_folder=/mnt/backups/home # root folder holding backups
    to_backup=/home/ # folder to backup -- should start and end with a /
    excludes=/home/katie/.home_excludes # file with stuff to exclude
    logfile=/var/log/backups/home.log # file to send output and rsync logs to
    errfile=/var/log/backups/home.err # file to send errors to
    link_name=current-home # name of symlink in $backup_folder pointing to latest home backups
    folder_prefix=home- # prefix of home backup folders
    delta_seconds=86400 # frequency of home backups in seconds
}

# Variables specific to root backups
set_full_vars() {
    mount_point=/mnt/backups/root # where backup drive is mounted
    backup_folder=/mnt/backups/root # root folder holding backups
    to_backup=/ # folder to backup -- should start and end with a /
    excludes=/home/katie/.full_excludes # file with stuff to exclude
    logfile=/var/log/backups/full.log # file to send output and rsync logs to
    errfile=/var/log/backups/full.err # file to send errors to
    link_name=current-full # name of symlink in $backup_folder pointing to latest full backups
    folder_prefix=full- # prefix of full backup folders
    delta_seconds=604800 # frequency of full backups in seconds
}

# Variables specific to shared backups
set_shared_vars() {
    mount_point=/mnt/backups/shared # where backup drive is mounted
    backup_folder=/mnt/backups/shared # root folder holding backups
    to_backup=/mnt/shared/ # folder to backup -- should start and end with a /
    excludes=/home/katie/.shared_excludes # file with stuff to exclude
    logfile=/var/log/backups/shared.log # file to send output and rsync logs to
    errfile=/var/log/backups/shared.err # file to send errors to
    link_name=current # name of symlink in $backup_folder pointing to latest full backups
    folder_prefix=shared- # prefix of full backup folders
    delta_seconds=604800 # frequency of full backups in seconds
}

# Variables specific to media backups
set_media_vars() {
    mount_point=/mnt/backups/media # where backup drive is mounted
    backup_folder=/mnt/backups/media # root folder holding backups
    to_backup=/mnt/media/ # folder to backup -- should start and end with a /
    excludes=/home/katie/.media_excludes # file with stuff to exclude
    logfile=/var/log/backups/media.log # file to send output and rsync logs to
    errfile=/var/log/backups/media.err # file to send errors to
    link_name=current # name of symlink in $backup_folder pointing to latest full backups
    folder_prefix=media- # prefix of full backup folders
    delta_seconds=604800 # frequency of full backups in seconds
}




#-------------------------------------------------------------------------------
#--------------------------------- MAIN SCRIPT ---------------------------------
#-------------------------------------------------------------------------------

main() {
    check_root

    current_date=`date "+%s"` # current date in UNIX time
    test_times=1 # test timestamps by default

    for torun in "$@" ; do
        case "$torun" in
            "home") 
                set_home_vars
                ;;
            "full")
                set_full_vars
                ;;
            "shared")
                set_shared_vars
                ;;
            "media")
                set_media_vars
                ;;
            "-f") # force option -- don't test timestamps
                test_times=
                continue
                ;;
            *)
                echoerr Unknown backup option. Exiting.
                exit 2
                ;;
        esac

        redirect_output # redirect output/error

        folder_name=$folder_prefix`date "+%Y.%m.%d-%H.%M"`

        # check date only if -f option not given
        [ "$test_times" = "1" ] && check_date || run_backups=1

        if [ "$run_backups" = "1" ]; then
            echo "Making new backups."

            # mount drive
            mount_backups $mount_point

            # call function to make new backups
            make_backups
        else
            echo "Not making new backups. Last backups:"
            echo successful backup: $lastbackupdate
        fi

        # Restore stdout/stderr
        restore_output
    done

    # unmount disk if it was not already mounted
    [ -z $unmount_when_done ] || { sleep 5; umount $mount_point; }

    exit 0
}





# ------------------------------------------------------------------------------
# ----------------------------- Mount backup drive -----------------------------
# ------------------------------------------------------------------------------

mount_backups() {
    # if drive not already mounted
    if ! grep -qs $1 /proc/mounts ; then
        echo $1 "not mounted"

        if ! mount $1 ; then
            echoerr "Mounting failed."
            echoerr Date: `date "+%Y.%m.%d-%H.%M"`
            exit 1
        else
            unmount_when_done=1 # unmount drive again when backups finished
            mounted=1
            echo "Mounting successful"
            return 0
        fi
    else
        echo $1 "mounted"
        mounted=1
        return 0
    fi
}



# ------------------------------------------------------------------------------
# --------------------------- Check last backup date ---------------------------
# ------------------------------------------------------------------------------

check_date() {

    local max_lines=10000 # max lines to search in log file for last date
    local x1=
    local x2=
    local lastdate=

    # If logfile exists, look through end of file for line:
    # sucessful backup: (date) and store date
    if [ -f $logfile ]; then
    read x1 x2 lastdate <<< $(tail -$max_lines $logfile | \
        grep "successful backup: [0-9]*" | tail -1)
    fi

    # If no date found in file, look through backup directory
    if [ -z $lastdate ]
    then
        echo "No previous backup found in log file. Checking backup folder."
        mount_backups $mount_point
        lastdate=0

        # Check each folder in the directory for ones with correct prefix, 
        # parse the date and save date of most recent backup
        for f in $backup_folder/*/ ; do
            local f2=$(basename "$f")
            if [[ $f2 = $folder_prefix* ]]; then
                f2=${f2#$folder_prefix}
                f2=${f2//[-]/ }
                f2=${f2//[.]/}
                local thisdate=`date --date="$f2" +'%s'`
                if [ $thisdate > $lastdate ]; then
                    lastdate=$thisdate
                fi
            fi
        done

    fi

    # If a date was found, check if it's recent enough
    if [ $lastdate -gt 0 ]; then
        lastbackupdate=${lastdate}
        echo "Previous backup found: $lastdate"
        if [ $((current_date - lastdate)) -gt $delta_seconds ]
        then
            run_backups=1
        else
            run_backups=0
        fi
    else
        run_backups=1
    fi
}






# ------------------------------------------------------------------------------
# ----------------------------- Backup using rsync -----------------------------
# ------------------------------------------------------------------------------

make_backups() {
    # Make directory to hold backups
    mkdir -p $backup_folder/$folder_name$to_backup

    # if symlink to previous backup exists
    echo $backup_folder/$link_name
    if [ -d $backup_folder/$link_name ] ; then 
        echo Symlink to previous backup found. Performing incremental backup.
        rsync -a $rsyncopts --log-file=$logfile --exclude-from=$excludes --link-dest=$backup_folder/$link_name $to_backup $backup_folder/$folder_name$to_backup
    else
        echo No symlink to previous backup found. Performing full backup.
        rsync -a $rsyncopts --log-file=$logfile --exclude-from=$excludes $to_backup $backup_folder/$folder_name$to_backup
    fi

    if [ $? = 0 ]; then
        # Remove old symlink and make new one
        rm -f $backup_folder/$link_name 
        ln -s $backup_folder/$folder_name$to_backup $backup_folder/$link_name

        # Echo line to log file to parse next time we run the script
        echo successful backup: $current_date >> $logfile
    else
        echoerr Rsync problem. Backup unsuccessful.
        [ -z $test_times ] || echo successful backup: $lastbackupdate >> $logfile
    fi
}





# Echo to stderr
echoerr() { echo "$@" 1>&2; }

# Redirect output/error to logfile
redirect_output() {
    exec 3>&1 4>&2

    # If not running interactively in shell, redirect output
    # and run rsync silently (since we already send rsync logs to the file).
    # Otherwise run rsync with progress output
    if [ ! -t 0 ]; then
        exec >>$logfile 2>>$errfile
        rsyncopts=
    else
        rsyncopts="--info=progress2"
    fi
}

# Restore stdout/stderr to original state
restore_output() {
    exec 1>&3 2>&4
}

# Check for root permissions
check_root() {
    if [ $EUID -ne 0 ]; then
        echoerr Script must be run as root.
        exit 3
    fi
}



# Run main function
echo done
main "$@"
